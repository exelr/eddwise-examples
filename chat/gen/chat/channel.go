// Code generated by eddwise, DO NOT EDIT.

package chat

import (
	"errors"

	"github.com/exelr/eddwise"
)

var _ eddwise.ImplChannel = (*Chat)(nil)
var _ ChatRecv = (*Chat)(nil)

type ChatRecv interface {
	OnChangeName(eddwise.Context, *ChangeName) error
	OnMessage(eddwise.Context, *Message) error
}

type Chat struct {
	server eddwise.Server
	recv   ChatRecv
}

func (ch *Chat) Name() string {
	return "Chat"
}

func (ch *Chat) Bind(server eddwise.Server) error {
	ch.server = server
	return nil
}

func (ch *Chat) SetReceiver(chr eddwise.ImplChannel) error {
	if _, ok := chr.(ChatRecv); !ok {
		return errors.New("unexpected channel type while SetReceiver on 'Chat' channel")
	}
	ch.recv = chr.(ChatRecv)
	return nil
}

func (ch *Chat) GetServer() eddwise.Server {
	return ch.server
}

func (ch *Chat) Route(ctx eddwise.Context, evt *eddwise.EventMessage) error {
	switch evt.Name {
	default:
		return eddwise.ErrMissingServerHandler(evt.Channel, evt.Name)

	case "ChangeName":
		var msg = &ChangeName{}
		if err := ch.server.Codec().Decode(evt.Body, msg); err != nil {
			return err
		}
		if err := msg.CheckReceivedFields(); err != nil {
			return err
		}
		return ch.recv.OnChangeName(ctx, msg)

	case "Message":
		var msg = &Message{}
		if err := ch.server.Codec().Decode(evt.Body, msg); err != nil {
			return err
		}
		if err := msg.CheckReceivedFields(); err != nil {
			return err
		}
		return ch.recv.OnMessage(ctx, msg)

	}
}

func (ch *Chat) OnChangeName(eddwise.Context, *ChangeName) error {
	return errors.New("event 'ChangeName' is not handled on server")
}

func (ch *Chat) OnMessage(eddwise.Context, *Message) error {
	return errors.New("event 'Message' is not handled on server")
}

func (ch *Chat) SendChangeName(client eddwise.Client, msg *ChangeName) error {
	return client.Send(ch.Name(), msg)
}

func (ch *Chat) SendMessage(client eddwise.Client, msg *Message) error {
	return client.Send(ch.Name(), msg)
}

func (ch *Chat) SendUserEnter(client eddwise.Client, msg *UserEnter) error {
	return client.Send(ch.Name(), msg)
}

func (ch *Chat) SendUserLeft(client eddwise.Client, msg *UserLeft) error {
	return client.Send(ch.Name(), msg)
}

func (ch *Chat) SendUserListUpdate(client eddwise.Client, msg *UserListUpdate) error {
	return client.Send(ch.Name(), msg)
}

func (ch *Chat) BroadcastChangeName(clients []eddwise.Client, msg *ChangeName) error {
	return eddwise.Broadcast(ch.Name(), msg, clients)
}

func (ch *Chat) BroadcastMessage(clients []eddwise.Client, msg *Message) error {
	return eddwise.Broadcast(ch.Name(), msg, clients)
}

func (ch *Chat) BroadcastUserEnter(clients []eddwise.Client, msg *UserEnter) error {
	return eddwise.Broadcast(ch.Name(), msg, clients)
}

func (ch *Chat) BroadcastUserLeft(clients []eddwise.Client, msg *UserLeft) error {
	return eddwise.Broadcast(ch.Name(), msg, clients)
}

func (ch *Chat) BroadcastUserListUpdate(clients []eddwise.Client, msg *UserListUpdate) error {
	return eddwise.Broadcast(ch.Name(), msg, clients)
}

// Event structures

// ChangeName is sent from client to server and then broadcast by server to all clients
type ChangeName struct {
	// the optional UserId is set only by server while broadcasting
	UserId *uint64 `json:"UserId,omitempty"` // ServerToClient
	Name   string  `json:"Name"`
}

func (evt *ChangeName) GetEventName() string {
	return "ChangeName"
}

func (evt *ChangeName) CheckSendFields() error {
	return nil
}

func (evt *ChangeName) CheckReceivedFields() error {
	if evt.UserId != nil {
		return errors.New("UserId is an invalid field")
	}
	return nil
}

// Message is sent from client to server and broadcast to other clients
type Message struct {
	// UserId is the optional id of the user. Set only by server, not by client
	UserId *uint64 `json:"UserId,omitempty"` // ServerToClient
	Text   string  `json:"Text"`
}

func (evt *Message) GetEventName() string {
	return "Message"
}

func (evt *Message) CheckSendFields() error {
	return nil
}

func (evt *Message) CheckReceivedFields() error {
	if evt.UserId != nil {
		return errors.New("UserId is an invalid field")
	}
	return nil
}

// UserEnter is broadcast by server to all clients when a new client connects
type UserEnter struct {
	UserId uint64 `json:"UserId"`
	Name   string `json:"Name"`
}

func (evt *UserEnter) GetEventName() string {
	return "UserEnter"
}

func (evt *UserEnter) CheckSendFields() error {
	return nil
}

func (evt *UserEnter) CheckReceivedFields() error {
	return nil
}

// UserLeft is broadcast by server to all clients when a client lefts
type UserLeft struct {
	UserId uint64 `json:"UserId"`
}

func (evt *UserLeft) GetEventName() string {
	return "UserLeft"
}

func (evt *UserLeft) CheckSendFields() error {
	return nil
}

func (evt *UserLeft) CheckReceivedFields() error {
	return nil
}

// UserListUpdate is sent to a new connected client
type UserListUpdate struct {
	List map[string]string `json:"List"`
}

func (evt *UserListUpdate) GetEventName() string {
	return "UserListUpdate"
}

func (evt *UserListUpdate) CheckSendFields() error {
	return nil
}

func (evt *UserListUpdate) CheckReceivedFields() error {
	return nil
}
