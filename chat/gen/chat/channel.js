// Code generated by eddwise, DO NOT EDIT.


/**
 * @typedef change_name
 * @property {uint} [user_id] - the optional UserId is set only by server while broadcasting // ServerToClient
 * @property {string} name 
*/

/**
 * @typedef message
 * @property {uint} [user_id] - UserId is the optional id of the user. Set only by server, not by client // ServerToClient
 * @property {string} text 
*/

/**
 * @typedef user_enter
 * @property {uint} user_id 
 * @property {string} name 
*/

/**
 * @typedef user_left
 * @property {uint} user_id 
*/

/**
 * @typedef user_list_update
 * @property {Object.<string, string>} list 
*/
import {EddChannel} from "/chat/edd.js";

class chatChannel extends EddChannel {
	constructor() {
		super("chat")
		Object.defineProperty(this, "getName", { configurable: false, writable: false, value: this.getName });
		Object.defineProperty(this, "setClient", { configurable: false, writable: false, value: this.setClient });
		Object.defineProperty(this, "route", { configurable: false, writable: false, value: this.route });

		Object.defineProperty(this, "change_name", { configurable: false, writable: false, value: this.sendchange_name });
		Object.defineProperty(this, "message", { configurable: false, writable: false, value: this.sendmessage });

		this._onchange_nameFn = null;
		this._onmessageFn = null;
		this._onuser_enterFn = null;
		this._onuser_leftFn = null;
		this._onuser_list_updateFn = null;
		this._connectedFn = null;
		this._disconnectedFn = null;
	}
	/**
     * @callback connectedCb
     */
    /**
     * @function chatChannel#connected
     * @param {connectedCb} callback
     */
	connected(callback){
		this._connectedFn = callback;
	}

	/**
     * @callback disconnectedCb
     */
    /**
     * @function chatChannel#disconnected
     * @param {disconnectedCb} callback
     */
	disconnected(callback){
		this._disconnectedFn = callback;
	}
	getName() {
		return "chat"
	}
	getAlias() {
		return "chat"
	}
	setClient(client) {
		this.client = client
	}
	route(name, body) {
		if(super.route(name,body,this.getAlias())){
            return
        }
		switch(name) {
			default:
				console.log("unexpected event ", name, "in channel chat")
				break

			// change_name
			case "change_name":
				return this.onchange_nameFn(body)
			// message
			case "message":
				return this.onmessageFn(body)
			// user_enter
			case "user_enter":
				return this.onuser_enterFn(body)
			// user_left
			case "user_left":
				return this.onuser_leftFn(body)
			// user_list_update
			case "user_list_update":
				return this.onuser_list_updateFn(body)
        }
    }


	/**
	 * @function chatChannel#onchange_nameFn
	 * @param {change_name} event
	*/
    onchange_nameFn(event) {
        if(this._onchange_nameFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onchange_nameFn(event)
    }
    /**
     * @callback onchange_nameCb
     * @param {change_name} event
     */
    /**
     * @function chatChannel#onchange_name
     * @param {onchange_nameCb} callback
     */
     onchange_name(callback) {
        this._onchange_nameFn = callback
    }

	/**
	 * @function chatChannel#onmessageFn
	 * @param {message} event
	*/
    onmessageFn(event) {
        if(this._onmessageFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onmessageFn(event)
    }
    /**
     * @callback onmessageCb
     * @param {message} event
     */
    /**
     * @function chatChannel#onmessage
     * @param {onmessageCb} callback
     */
     onmessage(callback) {
        this._onmessageFn = callback
    }

	/**
	 * @function chatChannel#onuser_enterFn
	 * @param {user_enter} event
	*/
    onuser_enterFn(event) {
        if(this._onuser_enterFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onuser_enterFn(event)
    }
    /**
     * @callback onuser_enterCb
     * @param {user_enter} event
     */
    /**
     * @function chatChannel#onuser_enter
     * @param {onuser_enterCb} callback
     */
     onuser_enter(callback) {
        this._onuser_enterFn = callback
    }

	/**
	 * @function chatChannel#onuser_leftFn
	 * @param {user_left} event
	*/
    onuser_leftFn(event) {
        if(this._onuser_leftFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onuser_leftFn(event)
    }
    /**
     * @callback onuser_leftCb
     * @param {user_left} event
     */
    /**
     * @function chatChannel#onuser_left
     * @param {onuser_leftCb} callback
     */
     onuser_left(callback) {
        this._onuser_leftFn = callback
    }

	/**
	 * @function chatChannel#onuser_list_updateFn
	 * @param {user_list_update} event
	*/
    onuser_list_updateFn(event) {
        if(this._onuser_list_updateFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onuser_list_updateFn(event)
    }
    /**
     * @callback onuser_list_updateCb
     * @param {user_list_update} event
     */
    /**
     * @function chatChannel#onuser_list_update
     * @param {onuser_list_updateCb} callback
     */
     onuser_list_update(callback) {
        this._onuser_list_updateFn = callback
    }


    /**
     * @function chatChannel#sendchange_name
     * @param {change_name} message
     */
    sendchange_name = function(message) {
        return this.client.send({channel:this.getAlias(), name:"change_name", body: message});
    }

    /**
     * @function chatChannel#sendmessage
     * @param {message} message
     */
    sendmessage = function(message) {
        return this.client.send({channel:this.getAlias(), name:"message", body: message});
    }

}

export {chatChannel}
