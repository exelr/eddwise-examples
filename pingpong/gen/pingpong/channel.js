// Code generated by eddwise, DO NOT EDIT.


/**
 * @typedef ping
 * @property {uint} id - the id of the ping 
*/

/**
 * @typedef pong
 * @property {uint} id - the id of the pong, same as the id of the received ping 
*/
import {EddChannel} from "/pingpong/edd.js";

class pingpongChannel extends EddChannel {
	constructor() {
		super("pingpong")
		Object.defineProperty(this, "getName", { configurable: false, writable: false, value: this.getName });
		Object.defineProperty(this, "setClient", { configurable: false, writable: false, value: this.setClient });
		Object.defineProperty(this, "route", { configurable: false, writable: false, value: this.route });

		Object.defineProperty(this, "pong", { configurable: false, writable: false, value: this.sendpong });

		this._onpingFn = null;
		this._connectedFn = null;
		this._disconnectedFn = null;
	}
	/**
     * @callback connectedCb
     */
    /**
     * @function pingpongChannel#connected
     * @param {connectedCb} callback
     */
	connected(callback){
		this._connectedFn = callback;
	}

	/**
     * @callback disconnectedCb
     */
    /**
     * @function pingpongChannel#disconnected
     * @param {disconnectedCb} callback
     */
	disconnected(callback){
		this._disconnectedFn = callback;
	}
	getName() {
		return "pingpong"
	}
	getAlias() {
		return "pingpong"
	}
	setClient(client) {
		this.client = client
	}
	route(name, body) {
		if(super.route(name,body,this.getAlias())){
            return
        }
		switch(name) {
			default:
				console.log("unexpected event ", name, "in channel pingpong")
				break

			// ping
			case "ping":
				return this.onpingFn(body)
        }
    }


	/**
	 * @function pingpongChannel#onpingFn
	 * @param {ping} event
	*/
    onpingFn(event) {
        if(this._onpingFn == null) {
            console.log("unhandled message 'ChangeName' received")
            return
        }
        this._onpingFn(event)
    }
    /**
     * @callback onpingCb
     * @param {ping} event
     */
    /**
     * @function pingpongChannel#onping
     * @param {onpingCb} callback
     */
     onping(callback) {
        this._onpingFn = callback
    }


    /**
     * @function pingpongChannel#sendpong
     * @param {pong} message
     */
    sendpong = function(message) {
        return this.client.send({channel:this.getAlias(), name:"pong", body: message});
    }

}

export {pingpongChannel}
